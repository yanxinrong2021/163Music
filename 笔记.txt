移动端事件处理
  PC端主要以：鼠标事件、键盘事件、资源加载事件、动画事件等事件为主，其中 click 在PC端是“点击”事件！
  移动端主要以：手指事件「单手指和多手指」、资源和动画事件等为主，其中 click 在移动端是“单击”事件！
  ---
  问题1：click事件在移动端存在300ms的延迟
    + 原因：其在移动端是单击事件，在第一次点击后，需要观察300ms，看是否触发了第二次点击；如果没有触发，则为单击操作，触发click事件，反之则为双击操作，click是不触发的！
    + 解决方案：
      @1 用 touch 事件模型{单手指事件模型}，来代替 click 事件
        + touchstart
        + touchmove
        + touchend
        + touchcancel
        但是这种方式，如果需要自己去实现，太繁琐了！
      @2 基于一些现有的封装好的事件库来解决
        + fastclick.js  只能解决click的300ms延迟问题
          适用于：操作简单的移动端产品上，在此产品上，只有点击行为，此时我们继续使用click事件，只不过基于fastclick插件，把其300ms延迟处理掉即可！
          原理：基于事件委托，对页面中的click行为做统一的处理，核心还是基于touch事件模型解决的
        + Zepto.js 「被称为移动端的JQ库，语法和JQ非常类似，但是能够更好的支持移动端」
          相比较于JQ来讲
            + 不考虑IE8及以下版本的兼容
            + 只实现了JQ中最常用、最核心的方法 「导致Zepto比JQ库小很多」
            + 支持CSS3动画
            + 封装了一套完善的移动端事件处理方案
          支持的移动端事件操作
            + tap 点击
            + singleTap 单击
            + doubleTap 双击
            + longTap 长按
            + swipe、swipeLeft/Right/Down/Up 滑动
            + pinchIn/Out 缩放
            + ...
          但是Zepto和JQ一样，其大部分代码是用来操作DOM的，已经不适用于当下的Vue/React开发！！
        + hammerjs 移动端专属的事件库
          https://hammerjs.github.io/
  ---
  问题2：事件穿透问题
    事件穿透是指：触发某个目标元素的触摸事件（touch事件）时，会同时触发该目标元素相同位置中，其他元素的click事件「触摸第一层，让第一层隐藏，露出第二层，而第二层是基于click事件处理的」
    事件触发的先后顺序是：touchstart -> touchend -> click
    https://www.cnblogs.com/jofun/p/13371431.html
    解决方案：click和touch事件不要混合在一起使用！！
  ---
  问题3：keydown/up/press等事件在移动端用不了，统一基于 input 事件代替即可！！
    文本框.oninput=function(){}
    只要文本框中有内容的输入，则 input 事件就会触发！！

==========================
响应式式布局开发技巧
  @1 PC端全屏项目（一般都是管理系统）
    技术方案：外层容器的宽高采用百分比布局「vw/vh」，一些具体的元素基本都是固定布局，偶尔基于@media进行微调
  @2 PC端和移动端共用一套项目（一般是结构和样式较为简单的企业官网/宣传页等）
    技术方案：流式布局（外层容器的宽度按照百分比方式处理），基于 @media 进行结构和样式的调整
    基于@media调整样式越细，展示效果会越好
    @media all and (max-width:960px){
        .header{
            ...
        }
        ...
    }
  @3 移动端项目（适配不同型号的手机设备，有的还需要适配pad端）
    传统方案：基于@media进行样式调整，尽可能适配更多的设备「官方提供的方案」
    新方案：REM等比缩放
  不论哪一种方案，目前做排列布局，基本上都是基于 flex 来处理!
------
移动端响应式布局第一步：设置 viewport
  <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
  + viewport：设置视口(或HTML页面)的规则
    + width=device-width 让HTML渲染的宽度和设备宽度保持一致
    + initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0  不让HTML页面进行缩放
    + user-scalable=no 禁止手动缩放
  + 如果不设置 viewport 会出现啥问题？
    不论手机设备多宽，HTML页面都是以 980px 的宽度进行渲染，这样就会出现，手机屏幕渲染不全的情况
    + 不完全渲染：就会出现横竖向的滚动条
    + 完全渲染：就要把页面整体缩小，所有内容都会变的很小

REM响应式布局方案
  @1 什么是 rem ?
    + px 物理像素，固定单位
    + em 相对单位，相对于父元素的字体大小
      .box{
        font-size:14px; // 1em=14px
        p{
           text-indent:2em; //首行缩进两个字符
        }
      }
    + rem（root em）相对单位，相对于根元素(也就是html)的字体大小
      html{
        font-size:20px; // 1rem=20px 「浏览器能识别的最小字体是12px」
      }
      .box1{
        width:100px;
      }
      .box2{
        width:5rem;
      }
      目前box1和box2是一般大的，但是如果以后，我把html的字体改为30px了，那么box1依然是100px，但是box2则自动变为150px了！！
      也就是：只要修改根元素的字体大小，那么所有以rem为单位的样式，都会自动跟着等比缩放！
  
  @2 基于rem实现响应式布局开发的步骤
    第一步：按照特定的尺寸（一般是设计稿的尺寸），设置rem和px的初始转换比例，然后把测量出来的像素值，全部按照这个比例，改为rem值，赋值给元素的样式！
      + 设计稿的尺寸：一般都是750px的「UI组件库的设计稿一般都是375px的」
      + 初始转换比例：设置的值一定是方便计算的
        html{
            font-size:100px; // 1rem=100px 「750px」
        }
        量出来一个盒子大小是 300px*260px
        .box{
            width:3rem;
            height:2.6rem;
            font-size:.28rem;
        }
        ...
    第二步：获取当前设备的尺寸，计算出相比较于设计稿而言，缩放的比例；然后按照这个比例，去修改html的字体大小（也就是rem和px的换算比例）
      公式：当前设备宽度/当前换算比例 = 设计稿宽度(750)/初始换算比例(100)
           当前换算比例 = 当前设备宽度/设计稿宽度(750)*初始换算比例(100)
      基于公式计算出最新的换算比例后，修改html的字体大小，那么之前所有以rem为单位的样式，都会按照最新的换算比例，实现等比缩放！！
    第三步：我们一般都会限制一个最大的缩放范围（比如：540），设备宽度即便超过这个范围，换算比例也不会再继续放大了，整个页面内容最宽540，左右两边预留空白即可！！

--------------
为啥设计师给我们的设计稿，都比实际的手机尺寸大一倍？
  iphone6/7/8 -> 375px
  iphone6/7/8 plus / iphoneXR -> 414px
750px的设计稿是参照375px设备来设计的，之所以大一倍，是因为：DPR「屏幕像素密度比 Device Pixel Ratio」
  + 物理像素
  + 分辨率
在DPR=2.0的设备上，我们准备的原始图片大小，要比最后设置的尺寸大一倍「屏幕就是按照大一倍的方式渲染的」
在DPR=3.0的设备上，原始图片大小，要比设置的尺寸大两倍
...
DPR对图片是最有影响的，对于文字等影响不大！！而且经过实测，DPR=3.0相比于DPR=2.0，变化也不是很大！
所以设计师给我们比真正尺寸大一倍的设计稿，其目的：让我们切出比设计尺寸大一倍的图片！如果设计稿中没有图片，按照375px的设计稿也是没有问题的「UI组件库一般都是这样的」！
----
理论上，官方告诉我们图片的处理方案是这样的：
  + 准备三张图  logo.png  logo@2x.png  logo@3x.png 
  + 我们需要根据当前设备的DPR，来决定使用哪张图
只不过前端这样处理太麻烦了「需要写JS/@media动态控制加载的图片」，而NativeApp开发有现成的处理方案「都是按照三张图处理」；所以在WebApp开发中，我们只会准备一张二倍图，不论DPR是多少，加载的都是这个二倍图「如果某些二倍图片在DPR为3的设备上，看起来模糊，就单独找设计师要一张三倍图」；